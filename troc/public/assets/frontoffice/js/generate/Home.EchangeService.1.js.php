 !function(t){var e={},s={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",autoHover:!1,autoDelay:0,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,onSliderLoad:function(){},onSlideBefore:function(){},onSlideAfter:function(){},onSlideNext:function(){},onSlidePrev:function(){},onSliderResize:function(){}};t.fn.bxSlider=function(n){if(0==this.length)return this;if(this.length>1)return this.each(function(){t(this).bxSlider(n)}),this;var o={},r=this;e.el=this;var a=t(window).width(),l=t(window).height(),d=function(){o.settings=t.extend({},s,n),o.settings.slideWidth=parseInt(o.settings.slideWidth),o.children=r.children(o.settings.slideSelector),o.children.length<o.settings.minSlides&&(o.settings.minSlides=o.children.length),o.children.length<o.settings.maxSlides&&(o.settings.maxSlides=o.children.length),o.settings.randomStart&&(o.settings.startSlide=Math.floor(Math.random()*o.children.length)),o.active={index:o.settings.startSlide},o.carousel=o.settings.minSlides>1||o.settings.maxSlides>1,o.carousel&&(o.settings.preloadImages="all"),o.minThreshold=o.settings.minSlides*o.settings.slideWidth+(o.settings.minSlides-1)*o.settings.slideMargin,o.maxThreshold=o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin,o.working=!1,o.controls={},o.interval=null,o.animProp="vertical"==o.settings.mode?"top":"left",o.usingCSS=o.settings.useCSS&&"fade"!=o.settings.mode&&function(){var t=document.createElement("div"),e=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"];for(var i in e)if(void 0!==t.style[e[i]])return o.cssPrefix=e[i].replace("Perspective","").toLowerCase(),o.animProp="-"+o.cssPrefix+"-transform",!0;return!1}(),"vertical"==o.settings.mode&&(o.settings.maxSlides=o.settings.minSlides),r.data("origStyle",r.attr("style")),r.children(o.settings.slideSelector).each(function(){t(this).data("origStyle",t(this).attr("style"))}),c()},c=function(){r.wrap('<div class="bx-wrapper"><div class="bx-viewport"></div></div>'),o.viewport=r.parent(),o.loader=t('<div class="bx-loading" />'),o.viewport.prepend(o.loader),r.css({width:"horizontal"==o.settings.mode?100*o.children.length+215+"%":"auto",position:"relative"}),o.usingCSS&&o.settings.easing?r.css("-"+o.cssPrefix+"-transition-timing-function",o.settings.easing):o.settings.easing||(o.settings.easing="swing"),f(),o.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),o.viewport.parent().css({maxWidth:p()}),o.settings.pager||o.viewport.parent().css({margin:"0 auto 0px"}),o.children.css({"float":"horizontal"==o.settings.mode?"left":"none",listStyle:"none",position:"relative"}),o.children.css("width",u()),"horizontal"==o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginRight",o.settings.slideMargin),"vertical"==o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginBottom",o.settings.slideMargin),"fade"==o.settings.mode&&(o.children.css({position:"absolute",zIndex:0,display:"none"}),o.children.eq(o.settings.startSlide).css({zIndex:o.settings.slideZIndex,display:"block"})),o.controls.el=t('<div class="bx-controls" />'),o.settings.captions&&P(),o.active.last=o.settings.startSlide==x()-1,o.settings.video&&r.fitVids();var e=o.children.eq(o.settings.startSlide);"all"==o.settings.preloadImages&&(e=o.children),o.settings.ticker?o.settings.pager=!1:(o.settings.pager&&T(),o.settings.controls&&C(),o.settings.auto&&o.settings.autoControls&&E(),(o.settings.controls||o.settings.autoControls||o.settings.pager)&&o.viewport.after(o.controls.el)),g(e,h)},g=function(e,i){var s=e.find("img, iframe").length;if(0==s)return i(),void 0;var n=0;e.find("img, iframe").each(function(){t(this).one("load",function(){++n==s&&i()}).each(function(){this.complete&&t(this).load()})})},h=function(){if(o.settings.infiniteLoop&&"fade"!=o.settings.mode&&!o.settings.ticker){var e="vertical"==o.settings.mode?o.settings.minSlides:o.settings.maxSlides,i=o.children.slice(0,e).clone().addClass("bx-clone"),s=o.children.slice(-e).clone().addClass("bx-clone");r.append(i).prepend(s)}o.loader.remove(),S(),"vertical"==o.settings.mode&&(o.settings.adaptiveHeight=!0),o.viewport.height(v()),r.redrawSlider(),o.settings.onSliderLoad(o.active.index),o.initialized=!0,o.settings.responsive&&t(window).bind("resize",Z),o.settings.auto&&o.settings.autoStart&&H(),o.settings.ticker&&L(),o.settings.pager&&q(o.settings.startSlide),o.settings.controls&&W(),o.settings.touchEnabled&&!o.settings.ticker&&O()},v=function(){var e=0,s=t();if("vertical"==o.settings.mode||o.settings.adaptiveHeight)if(o.carousel){var n=1==o.settings.moveSlides?o.active.index:o.active.index*m();for(s=o.children.eq(n),i=1;i<=o.settings.maxSlides-1;i++)s=n+i>=o.children.length?s.add(o.children.eq(i-1)):s.add(o.children.eq(n+i))}else s=o.children.eq(o.active.index);else s=o.children;return"vertical"==o.settings.mode?(s.each(function(){e+=t(this).outerHeight()}),o.settings.slideMargin>0&&(e+=o.settings.slideMargin*(o.settings.minSlides-1))):e=Math.max.apply(Math,s.map(function(){return t(this).outerHeight(!1)}).get()),e},p=function(){var t="100%";return o.settings.slideWidth>0&&(t="horizontal"==o.settings.mode?o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin:o.settings.slideWidth),t},u=function(){var t=o.settings.slideWidth,e=o.viewport.width();return 0==o.settings.slideWidth||o.settings.slideWidth>e&&!o.carousel||"vertical"==o.settings.mode?t=e:o.settings.maxSlides>1&&"horizontal"==o.settings.mode&&(e>o.maxThreshold||e<o.minThreshold&&(t=(e-o.settings.slideMargin*(o.settings.minSlides-1))/o.settings.minSlides)),t},f=function(){var t=1;if("horizontal"==o.settings.mode&&o.settings.slideWidth>0)if(o.viewport.width()<o.minThreshold)t=o.settings.minSlides;else if(o.viewport.width()>o.maxThreshold)t=o.settings.maxSlides;else{var e=o.children.first().width();t=Math.floor(o.viewport.width()/e)}else"vertical"==o.settings.mode&&(t=o.settings.minSlides);return t},x=function(){var t=0;if(o.settings.moveSlides>0)if(o.settings.infiniteLoop)t=o.children.length/m();else for(var e=0,i=0;e<o.children.length;)++t,e=i+f(),i+=o.settings.moveSlides<=f()?o.settings.moveSlides:f();else t=Math.ceil(o.children.length/f());return t},m=function(){return o.settings.moveSlides>0&&o.settings.moveSlides<=f()?o.settings.moveSlides:f()},S=function(){if(o.children.length>o.settings.maxSlides&&o.active.last&&!o.settings.infiniteLoop){if("horizontal"==o.settings.mode){var t=o.children.last(),e=t.position();b(-(e.left-(o.viewport.width()-t.width())),"reset",0)}else if("vertical"==o.settings.mode){var i=o.children.length-o.settings.minSlides,e=o.children.eq(i).position();b(-e.top,"reset",0)}}else{var e=o.children.eq(o.active.index*m()).position();o.active.index==x()-1&&(o.active.last=!0),void 0!=e&&("horizontal"==o.settings.mode?b(-e.left,"reset",0):"vertical"==o.settings.mode&&b(-e.top,"reset",0))}},b=function(t,e,i,s){if(o.usingCSS){var n="vertical"==o.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)";r.css("-"+o.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"==e?(r.css(o.animProp,n),r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(){r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),D()})):"reset"==e?r.css(o.animProp,n):"ticker"==e&&(r.css("-"+o.cssPrefix+"-transition-timing-function","linear"),r.css(o.animProp,n),r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(){r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(s.resetValue,"reset",0),N()}))}else{var a={};a[o.animProp]=t,"slide"==e?r.animate(a,i,o.settings.easing,function(){D()}):"reset"==e?r.css(o.animProp,t):"ticker"==e&&r.animate(a,speed,"linear",function(){b(s.resetValue,"reset",0),N()})}},w=function(){for(var e="",i=x(),s=0;i>s;s++){var n="";o.settings.buildPager&&t.isFunction(o.settings.buildPager)?(n=o.settings.buildPager(s),o.pagerEl.addClass("bx-custom-pager")):(n=s+1,o.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+s+'" class="bx-pager-link">'+n+"</a></div>"}o.pagerEl.html(e)},T=function(){o.settings.pagerCustom?o.pagerEl=t(o.settings.pagerCustom):(o.pagerEl=t('<div class="bx-pager" />'),o.settings.pagerSelector?t(o.settings.pagerSelector).html(o.pagerEl):o.controls.el.addClass("bx-has-pager").append(o.pagerEl),w()),o.pagerEl.on("click","a",I)},C=function(){o.controls.next=t('<a class="bx-next" href="">'+o.settings.nextText+"</a>"),o.controls.prev=t('<a class="bx-prev" href="">'+o.settings.prevText+"</a>"),o.controls.next.bind("click",y),o.controls.prev.bind("click",z),o.settings.nextSelector&&t(o.settings.nextSelector).append(o.controls.next),o.settings.prevSelector&&t(o.settings.prevSelector).append(o.controls.prev),o.settings.nextSelector||o.settings.prevSelector||(o.controls.directionEl=t('<div class="bx-controls-direction" />'),o.controls.directionEl.append(o.controls.prev).append(o.controls.next),o.controls.el.addClass("bx-has-controls-direction").append(o.controls.directionEl))},E=function(){o.controls.start=t('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+o.settings.startText+"</a></div>"),o.controls.stop=t('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+o.settings.stopText+"</a></div>"),o.controls.autoEl=t('<div class="bx-controls-auto" />'),o.controls.autoEl.on("click",".bx-start",k),o.controls.autoEl.on("click",".bx-stop",M),o.settings.autoControlsCombine?o.controls.autoEl.append(o.controls.start):o.controls.autoEl.append(o.controls.start).append(o.controls.stop),o.settings.autoControlsSelector?t(o.settings.autoControlsSelector).html(o.controls.autoEl):o.controls.el.addClass("bx-has-controls-auto").append(o.controls.autoEl),A(o.settings.autoStart?"stop":"start")},P=function(){o.children.each(function(){var e=t(this).find("img:first").attr("title");void 0!=e&&(""+e).length&&t(this).append('<div class="bx-caption"><span>'+e+"</span></div>")})},y=function(t){o.settings.auto&&r.stopAuto(),r.goToNextSlide(),t.preventDefault()},z=function(t){o.settings.auto&&r.stopAuto(),r.goToPrevSlide(),t.preventDefault()},k=function(t){r.startAuto(),t.preventDefault()},M=function(t){r.stopAuto(),t.preventDefault()},I=function(e){o.settings.auto&&r.stopAuto();var i=t(e.currentTarget),s=parseInt(i.attr("data-slide-index"));s!=o.active.index&&r.goToSlide(s),e.preventDefault()},q=function(e){var i=o.children.length;return"short"==o.settings.pagerType?(o.settings.maxSlides>1&&(i=Math.ceil(o.children.length/o.settings.maxSlides)),o.pagerEl.html(e+1+o.settings.pagerShortSeparator+i),void 0):(o.pagerEl.find("a").removeClass("active"),o.pagerEl.each(function(i,s){t(s).find("a").eq(e).addClass("active")}),void 0)},D=function(){if(o.settings.infiniteLoop){var t="";0==o.active.index?t=o.children.eq(0).position():o.active.index==x()-1&&o.carousel?t=o.children.eq((x()-1)*m()).position():o.active.index==o.children.length-1&&(t=o.children.eq(o.children.length-1).position()),t&&("horizontal"==o.settings.mode?b(-t.left,"reset",0):"vertical"==o.settings.mode&&b(-t.top,"reset",0))}o.working=!1,o.settings.onSlideAfter(o.children.eq(o.active.index),o.oldIndex,o.active.index)},A=function(t){o.settings.autoControlsCombine?o.controls.autoEl.html(o.controls[t]):(o.controls.autoEl.find("a").removeClass("active"),o.controls.autoEl.find("a:not(.bx-"+t+")").addClass("active"))},W=function(){1==x()?(o.controls.prev.addClass("disabled"),o.controls.next.addClass("disabled")):!o.settings.infiniteLoop&&o.settings.hideControlOnEnd&&(0==o.active.index?(o.controls.prev.addClass("disabled"),o.controls.next.removeClass("disabled")):o.active.index==x()-1?(o.controls.next.addClass("disabled"),o.controls.prev.removeClass("disabled")):(o.controls.prev.removeClass("disabled"),o.controls.next.removeClass("disabled")))},H=function(){o.settings.autoDelay>0?setTimeout(r.startAuto,o.settings.autoDelay):r.startAuto(),o.settings.autoHover&&r.hover(function(){o.interval&&(r.stopAuto(!0),o.autoPaused=!0)},function(){o.autoPaused&&(r.startAuto(!0),o.autoPaused=null)})},L=function(){var e=0;if("next"==o.settings.autoDirection)r.append(o.children.clone().addClass("bx-clone"));else{r.prepend(o.children.clone().addClass("bx-clone"));var i=o.children.first().position();e="horizontal"==o.settings.mode?-i.left:-i.top}b(e,"reset",0),o.settings.pager=!1,o.settings.controls=!1,o.settings.autoControls=!1,o.settings.tickerHover&&!o.usingCSS&&o.viewport.hover(function(){r.stop()},function(){var e=0;o.children.each(function(){e+="horizontal"==o.settings.mode?t(this).outerWidth(!0):t(this).outerHeight(!0)});var i=o.settings.speed/e,s="horizontal"==o.settings.mode?"left":"top",n=i*(e-Math.abs(parseInt(r.css(s))));N(n)}),N()},N=function(t){speed=t?t:o.settings.speed;var e={left:0,top:0},i={left:0,top:0};"next"==o.settings.autoDirection?e=r.find(".bx-clone").first().position():i=o.children.first().position();var s="horizontal"==o.settings.mode?-e.left:-e.top,n="horizontal"==o.settings.mode?-i.left:-i.top,a={resetValue:n};b(s,"ticker",speed,a)},O=function(){o.touch={start:{x:0,y:0},end:{x:0,y:0}},o.viewport.bind("touchstart",X)},X=function(t){if(o.working)t.preventDefault();else{o.touch.originalPos=r.position();var e=t.originalEvent;o.touch.start.x=e.changedTouches[0].pageX,o.touch.start.y=e.changedTouches[0].pageY,o.viewport.bind("touchmove",Y),o.viewport.bind("touchend",V)}},Y=function(t){var e=t.originalEvent,i=Math.abs(e.changedTouches[0].pageX-o.touch.start.x),s=Math.abs(e.changedTouches[0].pageY-o.touch.start.y);if(3*i>s&&o.settings.preventDefaultSwipeX?t.preventDefault():3*s>i&&o.settings.preventDefaultSwipeY&&t.preventDefault(),"fade"!=o.settings.mode&&o.settings.oneToOneTouch){var n=0;if("horizontal"==o.settings.mode){var r=e.changedTouches[0].pageX-o.touch.start.x;n=o.touch.originalPos.left+r}else{var r=e.changedTouches[0].pageY-o.touch.start.y;n=o.touch.originalPos.top+r}b(n,"reset",0)}},V=function(t){o.viewport.unbind("touchmove",Y);var e=t.originalEvent,i=0;if(o.touch.end.x=e.changedTouches[0].pageX,o.touch.end.y=e.changedTouches[0].pageY,"fade"==o.settings.mode){var s=Math.abs(o.touch.start.x-o.touch.end.x);s>=o.settings.swipeThreshold&&(o.touch.start.x>o.touch.end.x?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto())}else{var s=0;"horizontal"==o.settings.mode?(s=o.touch.end.x-o.touch.start.x,i=o.touch.originalPos.left):(s=o.touch.end.y-o.touch.start.y,i=o.touch.originalPos.top),!o.settings.infiniteLoop&&(0==o.active.index&&s>0||o.active.last&&0>s)?b(i,"reset",200):Math.abs(s)>=o.settings.swipeThreshold?(0>s?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):b(i,"reset",200)}o.viewport.unbind("touchend",V)},Z=function(){var e=t(window).width(),i=t(window).height();(a!=e||l!=i)&&(a=e,l=i,r.redrawSlider(),o.settings.onSliderResize.call(r,o.active.index))};return r.goToSlide=function(e,i){if(!o.working&&o.active.index!=e)if(o.working=!0,o.oldIndex=o.active.index,o.active.index=0>e?x()-1:e>=x()?0:e,o.settings.onSlideBefore(o.children.eq(o.active.index),o.oldIndex,o.active.index),"next"==i?o.settings.onSlideNext(o.children.eq(o.active.index),o.oldIndex,o.active.index):"prev"==i&&o.settings.onSlidePrev(o.children.eq(o.active.index),o.oldIndex,o.active.index),o.active.last=o.active.index>=x()-1,o.settings.pager&&q(o.active.index),o.settings.controls&&W(),"fade"==o.settings.mode)o.settings.adaptiveHeight&&o.viewport.height()!=v()&&o.viewport.animate({height:v()},o.settings.adaptiveHeightSpeed),o.children.filter(":visible").fadeOut(o.settings.speed).css({zIndex:0}),o.children.eq(o.active.index).css("zIndex",o.settings.slideZIndex+1).fadeIn(o.settings.speed,function(){t(this).css("zIndex",o.settings.slideZIndex),D()});else{o.settings.adaptiveHeight&&o.viewport.height()!=v()&&o.viewport.animate({height:v()},o.settings.adaptiveHeightSpeed);var s=0,n={left:0,top:0};if(!o.settings.infiniteLoop&&o.carousel&&o.active.last)if("horizontal"==o.settings.mode){var a=o.children.eq(o.children.length-1);n=a.position(),s=o.viewport.width()-a.outerWidth()}else{var l=o.children.length-o.settings.minSlides;n=o.children.eq(l).position()}else if(o.carousel&&o.active.last&&"prev"==i){var d=1==o.settings.moveSlides?o.settings.maxSlides-m():(x()-1)*m()-(o.children.length-o.settings.maxSlides),a=r.children(".bx-clone").eq(d);n=a.position()}else if("next"==i&&0==o.active.index)n=r.find("> .bx-clone").eq(o.settings.maxSlides).position(),o.active.last=!1;else if(e>=0){var c=e*m();n=o.children.eq(c).position()}if("undefined"!=typeof n){var g="horizontal"==o.settings.mode?-(n.left-s):-n.top;b(g,"slide",o.settings.speed)}}},r.goToNextSlide=function(){if(o.settings.infiniteLoop||!o.active.last){var t=parseInt(o.active.index)+1;r.goToSlide(t,"next")}},r.goToPrevSlide=function(){if(o.settings.infiniteLoop||0!=o.active.index){var t=parseInt(o.active.index)-1;r.goToSlide(t,"prev")}},r.startAuto=function(t){o.interval||(o.interval=setInterval(function(){"next"==o.settings.autoDirection?r.goToNextSlide():r.goToPrevSlide()},o.settings.pause),o.settings.autoControls&&1!=t&&A("stop"))},r.stopAuto=function(t){o.interval&&(clearInterval(o.interval),o.interval=null,o.settings.autoControls&&1!=t&&A("start"))},r.getCurrentSlide=function(){return o.active.index},r.getCurrentSlideElement=function(){return o.children.eq(o.active.index)},r.getSlideCount=function(){return o.children.length},r.redrawSlider=function(){o.children.add(r.find(".bx-clone")).outerWidth(u()),o.viewport.css("height",v()),o.settings.ticker||S(),o.active.last&&(o.active.index=x()-1),o.active.index>=x()&&(o.active.last=!0),o.settings.pager&&!o.settings.pagerCustom&&(w(),q(o.active.index))},r.destroySlider=function(){o.initialized&&(o.initialized=!1,t(".bx-clone",this).remove(),o.children.each(function(){void 0!=t(this).data("origStyle")?t(this).attr("style",t(this).data("origStyle")):t(this).removeAttr("style")}),void 0!=t(this).data("origStyle")?this.attr("style",t(this).data("origStyle")):t(this).removeAttr("style"),t(this).unwrap().unwrap(),o.controls.el&&o.controls.el.remove(),o.controls.next&&o.controls.next.remove(),o.controls.prev&&o.controls.prev.remove(),o.pagerEl&&o.settings.controls&&o.pagerEl.remove(),t(".bx-caption",this).remove(),o.controls.autoEl&&o.controls.autoEl.remove(),clearInterval(o.interval),o.settings.responsive&&t(window).unbind("resize",Z))},r.reloadSlider=function(t){void 0!=t&&(n=t),r.destroySlider(),d()},d(),this}}(jQuery);$(document).ready(function(){ $("#slide-members").owlCarousel({ loop:true, margin:10, nav:false, dots:false, autoplaySpeed: 1000, autoplay:true, autoplayTimeout:4000, autoplayHoverPause:true, responsive:{ 0:{ items:1 }, 980:{ items:2 } } }); $("#medias-logos").owlCarousel({ loop:true, slideTransition: "linear", margin:10, nav:false, dots:false, autoplaySpeed: 2000, autoplay:true, autoplayTimeout:2000, autoplayHoverPause:true, autoHeight:true, responsive:{ 0:{ items:1 }, 560:{ items:2 }, 768:{ items:3 }, 980:{ items:4 }, 1200:{ items:4 }, 1280:{ items:5 }, 1360:{ items:6 }, 3000:{ items:6 } } }); }); function dataEvent() { if (consoleDebug) console.log('[dataEvent] Load'); let items = document.querySelectorAll('[data-event]:not([data-event-listened])'); [].forEach.call(items, function(item) { let event = item.getAttribute('data-event'); if (item.getAttribute('data-hide')) item.addEventListener(event, dataEventHide, false); if (item.getAttribute('data-show')) item.addEventListener(event, dataEventShow, false); if (item.getAttribute('data-insert')) item.addEventListener(event, dataEventInsert, false); if (item.getAttribute('data-replace')) item.addEventListener(event, dataEventInsert, false); if (item.getAttribute('data-prepend')) item.addEventListener(event, dataEventPrepend, false); if (item.getAttribute('data-append')) item.addEventListener(event, dataEventAppend, false); if (item.getAttribute('data-append-selector')) item.addEventListener(event, dataEventAppendSelector, false); if (item.getAttribute('data-clear')) item.addEventListener(event, dataEventClear, false); if (item.getAttribute('data-empty')) item.addEventListener(event, dataEventClear, false); if (item.getAttribute('data-delete')) item.addEventListener(event, dataEventDelete, true); if (item.getAttribute('data-toggle')) { if (event === 'click') item.addEventListener(event, dataEventToggle, false); else { item.addEventListener('mouseover', dataEventToggle, false); item.addEventListener('mouseout', dataEventToggle, false); } } if (item.getAttribute('data-toggle-display')) item.addEventListener(event, dataEventToggleDisplay, true); if (item.getAttribute('data-add-classes')) item.addEventListener(event, dataEventAddClasses, false); if (item.getAttribute('data-remove-classes')) item.addEventListener(event, dataEventRemoveClasses, false); if (item.getAttribute('data-switch-classes')) item.addEventListener(event, dataEventSwitchClasses, false); if (item.getAttribute('data-toggle-classes')) { if (event === 'click') item.addEventListener(event, dataEventToggleClasses, false); else { item.addEventListener('mouseover', dataEventToggleClasses, false); item.addEventListener('mouseout', dataEventToggleClasses, false); } } if (item.getAttribute('data-switch-group')) item.addEventListener(event, dataEventSwitchGroup, false); if (item.getAttribute('data-toggle-checkbox')) item.addEventListener(event, dataEventToggleCheckBox, false); if (item.getAttribute('data-toggle-disabled')) item.addEventListener(event, dataEventToggleDisabled, false); if (item.getAttribute('data-disabled-true')) item.addEventListener(event, dataEventDisabledTrue, false); if (item.getAttribute('data-disabled-false')) item.addEventListener(event, dataEventDisabledFalse, false); if (item.getAttribute('data-move')) item.addEventListener(event, dataEventMove, false); if (item.getAttribute('data-increment')) item.addEventListener(event, dataEventIncrement, false); if (item.getAttribute('data-decrement')) item.addEventListener(event, dataEventDecrement, false); if (item.getAttribute('data-click')) item.addEventListener(event, dataEventClick, false); item.setAttribute('data-event-listened', 'true'); }); } function dataEventHide() { let selectors = this.getAttribute('data-hide').split(' '); forEach(selectors, function(key, selector){ if (selector === 'this') this.classList.add('display-none'); else if (selector === 'prev' || selector === 'previous') this.previousElementSibling.classList.add('display-none'); else if (selector === 'next') this.nextElementSibling.classList.add('display-none'); else if (selector === 'parent') this.parentNode.classList.add('display-none'); else if (selector === 'child' || selector === 'children') this.querySelectorAll('*').classList.add('display-none'); else { let elements = document.querySelectorAll(selector); elements.forEach(function(element){ element.classList.add('display-none'); }); } }); if (consoleDebug) console.log('[dataEvent] Hide'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventShow() { let selectors = this.getAttribute('data-show').split(' '); forEach(selectors, function(key, selector){ if (selector === 'this') this.classList.remove('display-none'); else if (selector === 'prev' || selector === 'previous') this.previousElementSibling.classList.remove('display-none'); else if (selector === 'next') this.nextElementSibling.classList.remove('display-none'); else if (selector === 'parent') this.parentNode.classList.remove('display-none'); else if (selector === 'child' || selector === 'children') this.querySelectorAll('*').classList.remove('display-none'); else { let elements = document.querySelectorAll(selector); elements.forEach(function(element){ element.classList.remove('display-none'); }); } }); if (consoleDebug) console.log('[dataEvent] Show'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventAddClasses() { let current = this; let classes = this.getAttribute('data-add-classes').split(' '); let selectors = this.getAttribute('data-add-classes-target') ? this.getAttribute('data-add-classes-target').split(' ') : ['this']; forEach(selectors, function(kS, selector){ let elements = []; if (selector === 'this') elements = [current]; else if (selector === 'prev' || selector === 'previous') elements = [current.previousElementSibling]; else if (selector === 'next') elements = [current.nextElementSibling]; else if (selector === 'parent') elements = [current.parentNode]; else if (selector === 'child' || selector === 'children') elements = current.querySelectorAll('*'); else elements = document.querySelectorAll(selector); forEach(classes, function(kC, classe){ elements.forEach(function(element){ if (element) element.classList.add(classe); }); }); }); if (consoleDebug) console.log('[dataEvent] AddClasses'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventRemoveClasses() { let current = this; let classes = this.getAttribute('data-remove-classes').split(' '); let selectors = this.getAttribute('data-remove-classes-target') ? this.getAttribute('data-remove-classes-target').split(' ') : ['this']; forEach(selectors, function(kS, selector){ let elements = []; if (selector === 'this') elements = [current]; else if (selector === 'prev' || selector === 'previous') elements = [current.previousElementSibling]; else if (selector === 'next') elements = [current.nextElementSibling]; else if (selector === 'parent') elements = [current.parentNode]; else if (selector === 'child' || selector === 'children') elements = current.querySelectorAll('*'); else elements = document.querySelectorAll(selector); forEach(classes, function(kC, classe){ elements.forEach(function(element){ if (element) element.classList.remove(classe); }); }); }); if (consoleDebug) console.log('[dataEvent] RemoveClasses'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventSwitchClasses() { let current = this; let classes = this.getAttribute('data-switch-classes').split(' '); let siblings = current.parentElement.children; forEach(classes, function(kC, classe) { current.classList.add(classe); forEach(siblings, function(kS, element){ if (element !== current) { if (element) element.classList.remove(classe); } }); }); if (consoleDebug) console.log('[dataEvent] SwitchClasses'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventToggleClasses() { let current = this; let classes = this.getAttribute('data-toggle-classes').split(' '); let selectors = this.getAttribute('data-toggle-classes-target') ? this.getAttribute('data-toggle-classes-target').split(' ') : ['this']; forEach(selectors, function(kS, selector){ let elements = []; if (selector === 'this') elements = [current]; else if (selector === 'prev' || selector === 'previous') elements = [current.previousElementSibling]; else if (selector === 'next') elements = [current.nextElementSibling]; else if (selector === 'parent') elements = [current.parentNode]; else if (selector === 'child' || selector === 'children') elements = current.querySelectorAll('*'); else elements = document.querySelectorAll(selector); forEach(classes, function(kC, classe){ elements.forEach(function(element){ if (element) element.classList.toggle(classe); }); }); }); if (consoleDebug) console.log('[dataEvent] ToggleClasses'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventSwitchGroup() { let params = this.getAttribute('data-switch-group').split(' '); let groupSelector = params[0]; let activeTarget = params[1]; let targets = document.querySelectorAll(groupSelector); targets.forEach(function(target){ if (target) target.classList.add("display-none"); }); let target = document.querySelector(activeTarget); if (target) target.classList.remove("display-none"); if (consoleDebug) console.log('[dataEvent] SwitchGroup'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventToggle() { let selector = this.getAttribute('data-toggle'); if (selector === 'this') this.classList.toggle('display-none'); else if (selector === 'prev' || selector === 'previous') this.previousElementSibling.classList.toggle('display-none'); else if (selector === 'next') this.nextElementSibling.classList.toggle('display-none'); else if (selector === 'parent') this.parentNode.classList.toggle('display-none'); else if (selector === 'child' || selector === 'children') this.querySelectorAll('*').classList.toggle('display-none'); else { let elements = document.querySelectorAll(selector); elements.forEach(function(element) { if (element.classList) { element.classList.toggle("display-none"); } else { let classes = element.className.split(" "); let i = classes.indexOf("display-none"); if (i >= 0) classes.splice(i, 1); else classes.push("display-none"); element.className = classes.join(" "); } }); } if (consoleDebug) console.log('[dataEvent] Toggle '); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventToggleDisplay() { let selector = this.getAttribute('data-toggle-display'); if (selector === 'this') this.style.display = this.style.display === "none" ? "block" : "none" ; else if (selector === 'prev' || selector === 'previous') this.previousElementSibling.style.display = this.previousElementSibling.style.display === "none" ? "block" : "none" ; else if (selector === 'next') this.nextElementSibling.style.display = this.nextElementSibling.style.display === "none" ? "block" : "none" ; else if (selector === 'parent') this.parentNode.style.display = this.parentNode.style.display === "none" ? "block" : "none" ; else { let elements = document.querySelectorAll(selector); elements.forEach(function(element) { element.style.display = element.style.display === "none" ? "block" : "none" ; }); } if (consoleDebug) console.log('[dataEvent] Toggle display'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventInsert() { let content = (this.getAttribute('data-replace')) ? this.getAttribute('data-replace') : this.getAttribute('data-insert'); let targets = this.getAttribute('data-target').split(' '); targets.forEach(function(selector) { let elements = document.querySelectorAll(selector); elements.forEach(function(element){ element.innerHTML = null; element.insertAdjacentHTML('afterbegin', content); }); }); if (consoleDebug) console.log('[dataEvent] Insert'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventPrepend() { let content = this.getAttribute('data-prepend'); let targets = this.getAttribute('data-target').split(' '); targets.forEach(function(target) { let elements = document.querySelectorAll(target); elements.forEach(function(element){ element.insertAdjacentHTML('afterbegin', content); }); }); if (consoleDebug) console.log('[dataEvent] Prepend'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventAppend() { if (this.getAttribute('data-event-max')) { if (this.getAttribute('data-count') === this.getAttribute('data-event-max')) return false; } this.setAttribute('data-count', this.getAttribute('data-count')+1); let element = this; let content = this.getAttribute('data-append'); let targets = this.getAttribute('data-target').split(' '); targets.forEach(function(selector) { if (selector === 'next') { element.nextElementSibling.insertAdjacentHTML('beforeend', content); } else if (selector === 'previous') { element.previousElementSibling.insertAdjacentHTML('beforeend', content); } else { let elements = document.querySelectorAll(selector); elements.forEach(function(el) { el.insertAdjacentHTML('beforeend', content); }); } }); if (consoleDebug) console.log('[dataEvent] Append'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventClick() { let target = this.getAttribute('data-click'); let event = new MouseEvent('click', { 'view': window, 'bubbles': true, 'cancelable': true }); if (consoleDebug) console.log('[dataEvent] Click'); document.querySelector(target).dispatchEvent(event); } function dataEventAppendSelector() { let element = this; let content = document.querySelector( this.getAttribute('data-append-selector') ); let targets = this.getAttribute('data-target').split(' '); targets.forEach(function(selector) { if (selector === 'next') { element.nextElementSibling.insertAdjacentHTML('beforeend', content.outerHTML); } else if (selector === 'previous') { element.previousElementSibling.insertAdjacentHTML('beforeend', content.outerHTML); } else { let elements = document.querySelectorAll(selector); elements.forEach(function(el) { el.insertAdjacentHTML('beforeend', content.outerHTML); }); } }); if (consoleDebug) console.log('[dataEvent] AppendSelector'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventMove() { let move = this.getAttribute('data-move'); let moveData = move.split(' '); let direction = (moveData[0]) ? moveData[0] : 'right'; let step = (moveData[1]) ? moveData[1] : '10'; let selectors = (this.getAttribute('data-target')) ? this.getAttribute('data-target') : null; if (selectors) { selectors.forEach(function(selector) { let elements = []; let classname; if (selector.substr(0, 1) === '#') { let id = selector.substr(1); elements.push(document.getElementById(id)); } else if (selector.substr(0, 1) === '.') { classname = selector.substr(1); elements = document.getElementsByClassName(classname); } else { classname = selector; elements = document.getElementsByClassName(classname); } elements.forEach(function(element) { element.style.display = 'inline-block'; element.style.position = 'absolute'; if (direction === 'right') element.style.marginLeft = parseInt(element.style.marginLeft ? element.style.marginLeft : 0) + parseInt(step) + 'px'; if (direction === 'left') element.style.marginLeft = parseInt(element.style.marginLeft ? element.style.marginLeft : 0) - parseInt(step) + 'px'; if (direction === 'top') element.style.marginTop = parseInt(element.style.marginTop ? element.style.marginTop : 0) - parseInt(step) + 'px'; if (direction === 'bottom') element.style.marginTop = parseInt(element.style.marginTop ? element.style.marginTop : 0) + parseInt(step) + 'px'; }); }); } else { this.style.display = 'inline-block'; this.style.position = 'absolute'; if (direction === 'right') this.style.marginLeft = parseInt(this.style.marginLeft ? this.style.marginLeft : 0) + parseInt(step) + 'px'; if (direction === 'left') this.style.marginLeft = parseInt(this.style.marginLeft ? this.style.marginLeft : 0) - parseInt(step) + 'px'; if (direction === 'top') this.style.marginTop = parseInt(this.style.marginTop ? this.style.marginTop : 0) - parseInt(step) + 'px'; if (direction === 'bottom') this.style.marginTop = parseInt(this.style.marginTop ? this.style.marginTop : 0) + parseInt(step) + 'px'; } if (consoleDebug) console.log('[dataEvent] Move'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventClear() { let targets = (this.getAttribute('data-clear')) ? this.getAttribute('data-clear') : this.getAttribute('data-empty'); let selectors = targets.split(' '); selectors.forEach(function(selector) { let elements = []; let classname; if (selector.substr(0, 1) === '#') { let id = selector.substr(1); elements.push(document.getElementById(id)); } else if (selector.substr(0, 1) === '.') { classname = selector.substr(1); elements = document.getElementsByClassName(classname); } else { classname = selector; elements = document.getElementsByClassName(classname); } elements.forEach(function(element){ element.innerHTML = ''; }); }); if (consoleDebug) console.log('[dataEvent] Clear'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventDelete() { let $this = this; let targets = this.getAttribute('data-delete').split(' '); targets.forEach(function(target) { let elements = []; if (target === 'next') { elements.push($this.nextElementSibling); } else if (target === 'previous') { elements.push($this.previousElementSibling); } else if (target === 'parent') { elements.push($this.parentElement); } else { elements = document.querySelectorAll(target); } elements.forEach(function(element){ element.parentElement.removeChild(element); }); }); if (consoleDebug) console.log('[dataEvent] Delete'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventToggleCheckBox() { let masterCheckbox = this; let es = document.querySelectorAll(masterCheckbox.getAttribute('data-toggle-checkbox')); es.forEach(function(el) { el.checked = (masterCheckbox.checked) ? 'true' : false; }); if (consoleDebug) console.log('[dataEvent] ToggleCheckBox'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventToggleDisabled() { let radio = this; let groupsSelector = radio.getAttribute('data-toggle-disabled').split(' '); groupsSelector.forEach(function(groupSelector) { let group = document.querySelector(groupSelector); let items = group.querySelectorAll("*"); for (let item of items) { item.disabled = item.disabled !== true; console.log(item); } }); } function dataEventDisabledTrue() { let radio = this; let groupsSelector = radio.getAttribute('data-disabled-true').split(' '); groupsSelector.forEach(function(groupSelector) { let group = document.querySelector(groupSelector); let items = group.querySelectorAll("[name]"); for (let item of items) { item.disabled = true; } }); } function dataEventDisabledFalse() { let radio = this; let groupsSelector = radio.getAttribute('data-disabled-false').split(' '); groupsSelector.forEach(function(groupSelector) { let group = document.querySelector(groupSelector); let items = group.querySelectorAll("[name]"); for (let item of items) { item.disabled = false; } }); } function dataEventIncrement() { let current = this; let selectors = this.getAttribute('data-increment').split(' '); let step = this.getAttribute('data-increment-step') ? this.getAttribute('data-increment-step') : 1; let max = this.getAttribute('data-increment-max') ? this.getAttribute('data-increment-max') : 10000; forEach(selectors, function(kS, selector) { let elements = []; if (selector === 'this') elements = [current]; else if (selector === 'prev' || selector === 'previous') elements = [current.previousElementSibling]; else if (selector === 'next') elements = [current.nextElementSibling]; else if (selector === 'parent') elements = [current.parentNode]; else if (selector === 'child' || selector === 'children') elements = current.querySelectorAll('*'); else elements = document.querySelectorAll(selector); elements.forEach(function(element){ if (element) { if (element.value) { element.value = (parseInt(element.value) + step >= max) ? max : parseInt(element.value) + 1; } else { element.innerHTML = (parseInt(element.innerHTML) + step >= max) ? max : parseInt(element.innerHTML) + 1; } } }); }); if (consoleDebug) console.log('[dataEvent] Increment'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); } function dataEventDecrement() { let current = this; let selectors = this.getAttribute('data-decrement').split(' '); let step = this.getAttribute('data-decrement-step') ? this.getAttribute('data-decrement-step') : 1; let min = this.getAttribute('data-increment-min') ? this.getAttribute('data-increment-min') : 1; forEach(selectors, function(kS, selector){ let elements = []; if (selector === 'this') elements = [current]; else if (selector === 'prev' || selector === 'previous') elements = [current.previousElementSibling]; else if (selector === 'next') elements = [current.nextElementSibling]; else if (selector === 'parent') elements = [current.parentNode]; else if (selector === 'child' || selector === 'children') elements = current.querySelectorAll('*'); else elements = document.querySelectorAll(selector); elements.forEach(function(element){ if (element) { if (element.value) { element.value = (parseInt(element.value) - step <= min) ? min : parseInt(element.value) - step; } else { element.innerHTML = (parseInt(element.innerHTML) - step <= min) ? min : parseInt(element.innerHTML) - step; } } }); }); if (consoleDebug) console.log('[dataEvent] Decrement'); if (this.getAttribute('data-callback')) dataCallback(this.getAttribute('data-callback')); }  function dataModal() { if (consoleDebug) console.log('[dataModal] Load'); let els = document.querySelectorAll('[data-modal]'); [].forEach.call(els, function(el) { if (el.getAttribute('data-modal-handled') === 'true') { return; } let modalEvent = (el.tagName === 'SELECT') ? 'change' : 'click'; el.addEventListener(modalEvent, function(e) { if (this.getAttribute('data-modal-ignore') !== "true") { if (consoleDebug) console.log('[dataModal] Open '); e.stopPropagation(); e.stopImmediatePropagation(); e.preventDefault(); let content = this.getAttribute('data-modal'); let btnConfirmLabel = this.getAttribute('data-modal-confirm') ? this.getAttribute('data-modal-confirm') : "Oui"; let btnCancelLabel = this.getAttribute('data-modal-cancel') ? this.getAttribute('data-modal-cancel') : "Non"; let originRef = Math.floor((Math.random() * 100) + 1); let originAction = e.type; let ajax = !!this.getAttribute('data-ajax'); let size = this.getAttribute('data-popup-size') ? this.getAttribute('data-popup-size').split(' ') : null; this.setAttribute('data-modal-origin', originRef); this.setAttribute('data-modal-action', originAction); let modal = '<div id="modal-actions">' + '<button type="button" id="modal-confirm" class="highlight bold">'+btnConfirmLabel+'</button> ' + '<button type="button" id="modal-cancel" class="">'+btnCancelLabel+'</button> ' + '<input type="hidden" value="'+originRef+'" id="origin-ref" /> ' + '<input type="hidden" value="'+originAction+'" id="origin-action" /> ' + '<input type="hidden" value="'+ajax+'" id="origin-ajax" /> ' + '</div>'; insertPopup('<div id="modal-content">' + content + '</div>' + modal, size, false); document.querySelector('#modal-confirm').addEventListener('click', function () { if (consoleDebug) console.log('[dataModal] Confirm'); let allPopupContent = document.getElementsByClassName('popup-content'); let lastPopupContent = allPopupContent[allPopupContent.length - 1]; lastPopupContent.innerHTML = '<div class="loading large marg-auto marg-t-S"></div>'; el.setAttribute('data-modal-ignore', 'true'); closeLastPopup(); let originEvent = new MouseEvent(originAction, {'cancelable': true}); if (document.createEvent) { el.dispatchEvent(originEvent); } else { el.fireEvent("on" + originEvent.eventType, originEvent); } if (consoleDebug) console.log('[dataModal] Original event loaded'); }); document.querySelector('#modal-cancel').addEventListener('click', function () { if (consoleDebug) console.log('[dataModal] Cancel'); el.setAttribute('data-modal-ignore', 'false'); closeLastPopup(); }); return false; } else { if (consoleDebug) console.log('[dataModal] 2nd event '); this.setAttribute('data-modal-ignore', 'false'); return this; } }); el.setAttribute('data-modal-handled', 'true'); }); }  function dataGoto() { if (consoleDebug) console.log('[dataGoto] Load'); let els = document.querySelectorAll('[data-goto]:not(select)'); [].forEach.call(els, function(el) { if (el.getAttribute('data-goto-handled') === 'true') return; el.addEventListener("click", function(e) { e.preventDefault(); e.stopPropagation(); toggleWaiting(this); let uri = this.getAttribute('data-goto'); let target = this.getAttribute('data-target') ? this.getAttribute('data-target') : null; if (target) { window.open(uri, target); } else { window.location.href = uri; } return false; }); el.setAttribute('data-goto-handled', 'true'); }); els = document.querySelectorAll('select[data-goto]'); [].forEach.call(els, function(el) { if (el.getAttribute('data-goto-handled') === 'true') return; el.addEventListener("change", function(e) { e.preventDefault(); e.stopPropagation(); toggleWaiting(this); let selectedOption = this.options[this.selectedIndex]; if (selectedOption.value) window.location.href = selectedOption.value; return false; }); el.setAttribute('data-goto-handled', 'true'); }); els = document.querySelectorAll('[data-no-goto]'); [].forEach.call(els, function(el) { el.classList.add("cursor-default"); el.addEventListener("click", function(e) { if (consoleDebug) console.log('[dataGoto] No goto element clicked'); e.preventDefault(); e.stopPropagation(); e.stopImmediatePropagation(); return false; }); }); }  function responsiveClasses() { if (consoleDebug) console.log('[responsiveClasses] Load'); var els = document.querySelectorAll('[data-responsive-classes]'); var w = Math.max(document.documentElement['clientWidth'], document.body['scrollWidth'], document.documentElement['scrollWidth'], document.body['offsetWidth'], document.documentElement['offsetWidth']); [].forEach.call(els, function(el) { var rD = el.getAttribute('data-responsive-classes').split(' '); var m = null; var a = []; var dC = []; rD.forEach(function(sD) { var sDS = sD.split('='); var o = {size: parseInt(sDS[0]), classes: sDS[1].split(',')}; a.push(o); }); a = sortByKey(a, 'size'); a.forEach(function(ob) { if (w > ob.size || m == true) { ob.classes.forEach(function(c){ el.classList.remove(c); }); } else { if (!m) { ob.classes.forEach(function(c){ el.classList.add(c); }); m = true; } } if (ob.size == 0) { dC = ob.classes; } }); if (!m) { dC.forEach(function(c){ el.classList.add(c); }); } }); } function dataForm() { if (consoleDebug) console.log('[dataForm] Load'); let els; els = document.querySelectorAll('form'); [].forEach.call(els, function(el) { if (el.getAttribute('data-submit-form-handled') === 'true') return; el.addEventListener("submit", function() { toggleWaiting(this); }); el.setAttribute('data-submit-form-handled', 'true'); }); els = document.querySelectorAll('[data-submit]:not(select)'); [].forEach.call(els, function(el) { if (el.getAttribute('data-submit-handled') === 'true') return; el.addEventListener("click", function(e) { let targetForm = this.getAttribute('data-submit'); e.preventDefault(); e.stopPropagation(); e.stopImmediatePropagation(); if (targetForm === 'parent') { let parentForm = findParentByTagName(this, 'FORM'); parentForm.submit(); } else { document.querySelector(targetForm).submit(); } }); el.setAttribute('data-submit-handled', 'true'); }); els = document.querySelectorAll('select[data-submit]'); [].forEach.call(els, function(el) { if (el.getAttribute('data-submit-handled') === 'true') return; el.addEventListener("change", function(e) { let targetForm = this.getAttribute('data-submit'); e.preventDefault(); e.stopPropagation(); e.stopImmediatePropagation(); if (targetForm === 'parent') { let parentForm = findParentByTagName(this, 'FORM'); parentForm.submit(); } else { document.querySelector(targetForm).submit(); } }); el.setAttribute('data-submit-handled', 'true'); }); els = document.querySelectorAll('[type=submit]'); [].forEach.call(els, function(el) { if (el.getAttribute('data-type-submit-handled') === 'true') return; el.addEventListener("click", function() { if (this.getAttribute('data-ajax')) return false; let form = findParentByTagName(this, 'FORM'); if (this.getAttribute('name')) { let hiddenInput = document.createElement('INPUT'); hiddenInput.type = 'hidden'; hiddenInput.value = this.getAttribute('value') ? this.getAttribute('value') : 1; hiddenInput.name = this.getAttribute('name'); hiddenInput.classList.add('buttonValue'); form.appendChild(hiddenInput); if (consoleDebug) console.log('[dataForm] Form name injected, from submit element'); } }); el.setAttribute('data-type-submit-handled', 'true'); }); els = document.querySelectorAll('textarea'); [].forEach.call(els, function(el) { if (el.getAttribute('data-type-textarea-handled') === 'true') return; el.addEventListener("keydown", function(e) { let keyCode = e.keyCode || e.which; if (keyCode === 9) { e.preventDefault(); e.stopPropagation(); let start = this.selectionStart; let end = this.selectionEnd; this.value = this.value.substring(0, start) + "\t" + this.value.substring(end); this.selectionStart = this.selectionEnd = start + 1; return true; } }); el.setAttribute('data-type-textarea-handled', 'true'); }); let forms = document.querySelectorAll('form[data-form-design]'); [].forEach.call(forms, function(form) { if (form.getAttribute('data-form-design-handled') === 'true') return; let data = form.getAttribute('data-form-design').split(" "); formatFormItems(form, data); window.addEventListener('resize', function() { formatFormItems(form, data); }); form.setAttribute('data-form-design-handled', 'true'); }); let elems = document.querySelectorAll('textarea[maxlength]:not([data-count-chars-loaded])'); [].forEach.call(elems, function(elem) { var maxChars = elem.getAttribute('maxlength'); if (maxChars < 1) return false; let counterWidth = elem.offsetWidth / elem.parentNode.offsetWidth * 100; if (elem.tagName === 'TEXTAREA') { elem.insertAdjacentHTML('afterend', '<div class="charsCounter" style="display:none;width:'+counterWidth+'%;' + 'font-size:small; position: absolute; top: -1.6em; right: 10px; text-align:right;"><span>' + (elem.value.length ? elem.value.length : '0') +'</span>/'+maxChars+'</div>'); } else { elem.insertAdjacentHTML('afterend', '<div class="charsCounter" style="display:none;font-size:small;' + 'padding-left:1em;vertical-align:middle;"><span>' + (elem.value.length ? elem.value.length : '0') + '</span>/'+maxChars+'</div>'); } elem.addEventListener('click', function(e) { e.stopPropagation(); forEach(document.querySelectorAll('.charsCounter'), function(i, charsCounter){ charsCounter.style.display = 'none'; }); if (elem.tagName === 'TEXTAREA') this.nextElementSibling.style.display = 'block'; else this.nextElementSibling.style.display = 'inline-block'; }); window.addEventListener('click', function(){ forEach(document.querySelectorAll('.charsCounter'), function(i, charsCounter){ charsCounter.style.display = 'none'; }); }); elem.addEventListener('keyup', function() { let currentLength = this.value.length; if(this.tagName === 'TEXTAREA') this.nextElementSibling.style.display = 'block'; else this.nextElementSibling.style.display = 'inline-block'; this.nextElementSibling.querySelector('span').innerText = currentLength; if (currentLength >= maxChars) { return false; } }); elem.setAttribute("data-count-chars-loaded", "1"); }); let mainCheckboxes = document.querySelectorAll('[data-checkall]'); [].forEach.call(mainCheckboxes, function(mainCheckbox) { let params = mainCheckbox.getAttribute('data-checkall').split(" "); let checkboxesName = params[0]; let countTargets = params[1]; let checkboxes = document.getElementsByName(checkboxesName); mainCheckbox.addEventListener('change', function() { let checkedCount = 0; for(let i=0, n=checkboxes.length;i<n;i++) { checkboxes[i].checked = mainCheckbox.checked; if (checkboxes[i].checked === true) { checkedCount++; } } let targets = document.querySelectorAll(countTargets); if (targets) { [].forEach.call(targets, function(target) { target.innerHTML = checkedCount; }); } }); for(let i=0, n=checkboxes.length;i<n;i++) { checkboxes[i].addEventListener('change', function() { let checkedCount = 0; for(let x=0, y=checkboxes.length;x<y;x++) { if (checkboxes[x].checked === true) { checkedCount++; } } let targets = document.querySelectorAll(countTargets); if (targets) { [].forEach.call(targets, function(target) { target.innerHTML = checkedCount; }); } }); } }); } function formatFormItems(form, designData) { let formChildren = form.querySelectorAll(".label, .fieldset"); let fieldsSet = []; let wCol1 = designData[0]; let wCol2 = designData[1]; let respW = designData[2]; let style = designData[3]; [].forEach.call(formChildren, function(formChild) { if (formChild.tagName === 'LABEL') { if (parseInt(respW) < window.outerWidth) { formChild.style.width = wCol1; formChild.style.paddingRight = '2em'; formChild.classList.add('floatBlock'); formChild.classList.remove('rowBlock'); formChild.classList.remove('bold'); formChild.style.textAlign = (style === 'center') ? 'right' : formChild.style.textAlign; } else { formChild.classList.add('rowBlock'); formChild.classList.add('bold'); formChild.classList.remove('floatBlock'); formChild.style.textAlign = 'left'; formChild.style.paddingRight = '0'; } } else if (formChild.classList.contains('fieldset')) { fieldsSet.push(formChild); if (parseInt(respW) < window.outerWidth) { formChild.style.width = wCol2; formChild.classList.add('floatBlock'); formChild.classList.remove('rowBlock'); formChild.classList.remove('marg-b'); formChild.style.textAlign = (style === 'center') ? 'left' : formChild.style.textAlign; } else { formChild.classList.add('rowBlock'); formChild.classList.remove('floatBlock'); formChild.classList.add('marg-b'); formChild.style.textAlign = 'left'; } } else if (formChild.classList.contains('form-actions')) { if (parseInt(respW) < window.outerWidth && style === 'center') { formChild.style.marginLeft = wCol1; } else { formChild.style.marginLeft = "0"; } } }); forEach(fieldsSet, function(k, fieldset) { fieldset.insertAdjacentHTML('afterend', '<div class="clear"></div>'); }); } let x, i, j, selElmnt, a, b, c; x = document.getElementsByClassName("custom-select"); for (i = 0; i < x.length; i++) { selElmnt = x[i].getElementsByTagName("select")[0]; a = document.createElement("DIV"); a.setAttribute("class", "select-selected"); a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML; x[i].appendChild(a); b = document.createElement("DIV"); b.setAttribute("class", "select-items select-hide"); for (j = 1; j < selElmnt.length; j++) { c = document.createElement("DIV"); c.innerHTML = selElmnt.options[j].innerHTML; c.addEventListener("click", function() { let y, i, k, s, h; s = this.parentNode.parentNode.getElementsByTagName("select")[0]; h = this.parentNode.previousSibling; for (i = 0; i < s.length; i++) { if (s.options[i].innerHTML === this.innerHTML) { s.selectedIndex = i; h.innerHTML = this.innerHTML; y = this.parentNode.getElementsByClassName("same-as-selected"); for (k = 0; k < y.length; k++) { y[k].removeAttribute("class"); } this.setAttribute("class", "same-as-selected"); break; } } h.click(); }); b.appendChild(c); } x[i].appendChild(b); a.addEventListener("click", function(e) { e.stopPropagation(); closeAllSelect(this); this.nextSibling.classList.toggle("select-hide"); this.classList.toggle("select-arrow-active"); }); } function closeAllSelect(elmnt) { var x, y, i, arrNo = []; x = document.getElementsByClassName("select-items"); y = document.getElementsByClassName("select-selected"); for (i = 0; i < y.length; i++) { if (elmnt == y[i]) { arrNo.push(i) } else { y[i].classList.remove("select-arrow-active"); } } for (i = 0; i < x.length; i++) { if (arrNo.indexOf(i)) { x[i].classList.add("select-hide"); } } } document.addEventListener("click", closeAllSelect); let acceptDropUpload = function() { let div = document.createElement('div'); return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window; }(); let dropFileContainers = document.querySelectorAll("[data-drop-file]"); for (let i=0; i<dropFileContainers.length; i++) { let dropFileContainer = dropFileContainers[i]; let fileLimit = dropFileContainer.getAttribute("data-drop-file"); let inputFile = dropFileContainer.querySelector("input[type=file]"); let parentForm = inputFile.form; let postResult = document.querySelector(parentForm.getAttribute("data-ajax-target")); postResult = postResult ? postResult : parentForm; let filesCount = document.createElement('div'); filesCount.innerHTML = ''; filesCount.style.textAlign = "center"; dropFileContainer.appendChild(filesCount); let droppedFiles = []; if (acceptDropUpload) { dropFileContainer.classList.add("accept-drop"); dropFileContainer.addEventListener("drag", function (e) { e.preventDefault(); e.stopPropagation(); }); dropFileContainer.addEventListener("dragstart", function (e) { e.preventDefault(); e.stopPropagation(); }); dropFileContainer.addEventListener("dragend", function (e) { e.preventDefault(); e.stopPropagation(); }); dropFileContainer.addEventListener("dragover", function (e) { e.preventDefault(); e.stopPropagation(); }); dropFileContainer.addEventListener("dragenter", function (e) { e.preventDefault(); e.stopPropagation(); }); dropFileContainer.addEventListener("dragleave", function (e) { e.preventDefault(); e.stopPropagation(); }); dropFileContainer.addEventListener("drop", function (e) { e.preventDefault(); e.stopPropagation(); }); dropFileContainer.addEventListener("dragenter", function () { dropFileContainer.classList.add("drop-hover") }); dropFileContainer.addEventListener("dragover", function () { dropFileContainer.classList.add("drop-hover") }); dropFileContainer.addEventListener("dragleave", function () { dropFileContainer.classList.remove("drop-hover") }); dropFileContainer.addEventListener("dragend", function () { dropFileContainer.classList.remove("drop-hover") }); dropFileContainer.addEventListener("drop", function () { dropFileContainer.classList.remove("drop-hover") }); dropFileContainer.addEventListener("drop", function (e) { let newCount = inputFile.files.length + e.dataTransfer.files.length; if (newCount > fileLimit || newCount < 1) { return false; } droppedFiles.push(...e.dataTransfer.files); filesCount.innerHTML = newCount + (newCount === 1 ? ' fichier' : ' fichiers'); filesCount.classList.add("filesSelected"); }); } inputFile.addEventListener("change", function(){ let newCount = inputFile.files.length + droppedFiles.length; if (newCount > fileLimit || newCount < 1) { return false; } filesCount.innerHTML = newCount + (newCount === 1 ? ' fichier' : ' fichiers'); filesCount.classList.add("filesSelected"); }); parentForm.addEventListener("submit", function(e){ e.preventDefault(); if (!inputFile.value) { inputFile.disabled = "true"; } let ajaxData = new FormData(parentForm); if (droppedFiles.length > 0) { for(let i=0; i < droppedFiles.length; i++) { ajaxData.append(inputFile.getAttribute("name"), droppedFiles[i], droppedFiles[i].name); } } let request = new XMLHttpRequest(); request.open(parentForm.getAttribute("method"), parentForm.getAttribute("action"), true); request.onload = function() { let callback = parentForm.getAttribute("data-ajax-callback"); if (callback) { window[(callback)](request, postResult); } else { if (request.status === 200) { postResult.innerHTML = request.responseText; } else { postResult.innerHTML = "Error " + request.status + " occurred uploading your file.<br \/>"; } } filesCount.innerHTML = ""; droppedFiles = []; inputFile.value = null; }; request.send(ajaxData); }, false); } var ajaxLocked = false; function dataAjax() { if (consoleDebug) console.log('[dataAjax] Load'); let els = document.querySelectorAll('[data-ajax]:not(form)'); [].forEach.call(els, function(el) { if (el.getAttribute("data-ajax-handled") === 'true') return; let ajaxEvent = (el.getAttribute("data-ajax-event")) ? el.getAttribute("data-ajax-event") : 'click'; el.addEventListener(ajaxEvent, function(e) { let url = (this.href && this.href !== '' && this.href !== '#') ? this.href : ( (this.getAttribute("data-ajax-url")) ? this.getAttribute("data-ajax-url") : this.getAttribute("data-ajax") ); let method = this.getAttribute("data-ajax-method"); let data = this.getAttribute("data-ajax-data") ? JSON.parse(this.getAttribute("data-ajax-data")) : null; let target = this.getAttribute("data-ajax-target"); let behavior = this.getAttribute("data-ajax-behavior"); let callback = this.getAttribute("data-ajax-callback"); let loading = this.getAttribute("data-ajax-loading"); let tempId; toggleWaiting(this); if (!this.id) { tempId = 'ajaxTemp' + Math.floor((Math.random() * 100) + 1); this.id = tempId; } else { tempId = this.id; } callback = (callback) ? callback + '; ' + 'toggleWaitingFromId('+tempId+')' : 'toggleWaitingFromId('+tempId+')'; ajax(url, method, data, target, behavior, callback, loading); return false; }, false); el.setAttribute("data-ajax-handled", "true"); }); } $(document).ready(function() { $(document).on("change", "select[data-ajax-url]", function(event) { event.preventDefault(); var select = $(this); var url = select.data('ajax-url'); var target = select.data('ajax-target'); var behavior = select.data('ajax-target-behavior'); var method = select.data("ajax-method"); var callback = select.data('ajax-callback'); callback = (callback) ? callback.split(' ') : null; toggleWaiting(select); var object = { value: select.find('option:selected').val(), data: select.find('option:selected').data("ajax-data") }; $.ajax({ data: {JSONobject: JSON.stringify(object)}, type: method, crossDomain: true, url: url, success: function(result) { if (result) { var is_json = true; try { var data = $.parseJSON(result); } catch(error) { is_json = false; } if (is_json) { behavior = (data.behavior) ? data.behavior : 'prepend'; result = (data.content) ? data.content : result; } if (behavior == 'prepend') { $(target).prepend(result); } else if (behavior == 'append') { $(target).append(result); } else if (behavior == 'replace') { $(target).html(result); } else if (behavior == 'before') { $(target).before(result); } else if (behavior == 'after') { $(target).after(result); } else if (is_json) { $(target).val(result); } else { $(target).prepend(result); } } closeModal(); if (callback) { $.each(callback, function(key, functionString) { var functionSplited = functionString.split("("); var functionName = functionSplited[0]; if (functionSplited.length == 2) { var functionArgs = functionSplited[1].replace(")", ""); window[functionName](functionArgs); } else { window[functionName](); } }); } toggleWaiting(select); }, error: function(result) { if (consoleDebug) console.log(result.responseText); closeModal(); toggleWaiting(select); } }); }); $(document).on("submit", "form[data-ajax]", function(e) { e.preventDefault(); e.stopPropagation(); var form = $(this); var ajaxFormId = Math.floor((Math.random() * 100) + 1); form.attr('data-ajax-form-id', 'ajaxFormId'+ajaxFormId); var url = form.attr('action'); var method = form.attr('method'); var formData = form.serializeArray(); var target = form.data('ajax-target'); var behavior = form.data('ajax-behavior'); var callback = form.data('ajax-callback'); var loading = $(this).data('ajax-loading'); var data = {}; for (var i = 0, len = formData.length; i < len; i++) { if (formData[i].name.substr(-2) == '[]') { formData[i].name.replace('[]', ''); if (!data[formData[i].name]) data[formData[i].name] = []; data[formData[i].name].push(formData[i].value); } else { data[formData[i].name] = formData[i].value; } } var dedicatedModalCallback = (form.data('modal')) ? '; closeModal()' : ''; callback = (callback) ? callback + '; ajaxFormSubmitted(\'ajaxFormId'+ajaxFormId+'\')' + dedicatedModalCallback : 'ajaxFormSubmitted(\'ajaxFormId'+ajaxFormId+'\')'+dedicatedModalCallback; form.find('.tempSerialize').remove(); ajax(url, method, data, target, behavior, callback, loading); }); loadAjaxSubmitButton(); }); function ajax(url, method, data, target, behavior, callback, loading) { ajaxLocked = true; if (loading) { if ($(loading).length) $(loading).removeClass('display-none'); else console.log('Ajax : Error on loading element ['+loading+']'); } method = (method) ? method : 'POST'; data = (data) ? data : {}; data.async = 1; target = !target ? '#fwMsg' : (($(target).length < 1) ? null : target); behavior = (behavior) ? behavior : 'replace'; if (consoleDebug) { console.log('[Ajax] Url: '+url); console.log('[Ajax] Method: '+method); console.log('[Ajax] Target: '+target); console.log('[Ajax] Behavior: '+behavior); console.log('[Ajax] Data: '); console.log(data); } $.ajax({ url: url, type: method, data: data, async: true, success: function(result) { if (consoleDebug) console.log('[Ajax] Success'); if (result && target) { if (result == 'noResult') { result = ''; if (consoleDebug) console.log('[Ajax] Success > Empty result'); } else if (data = parseJSON(result)) { behavior = (data.behavior) ? data.behavior : behavior; result = (data.content) ? data.content : result; if (consoleDebug) console.log('[Ajax] Success > JSON result'); } else { if (consoleDebug) console.log('[Ajax] Success > Normal result'); } switch (behavior) { case 'prepend': $(target).prepend(result); break; case 'append': $(target).append(result); break; case 'replace': $(target).html(result); break; case 'before': $(target).before(result); break; case 'after': $(target).after(result); break; case 'value': $(target).val(result); break; case 'none': break; default : $(target).prepend(result); } $(target).removeClass('display-none'); } dataCallback(callback); ajaxAfterCallback(); ajaxLocked = false; if ($(loading).length) { $(loading).addClass('display-none'); } return result; }, error: function(result) { if (consoleDebug) { console.log('[Ajax] Request error'); console.log(result.responseText); } ajaxLocked = false; if ($(loading).length) { $(loading).addClass('display-none'); } return result; } }); } function parseJSON(str) { let result; try { result = $.parseJSON(str); } catch (e) { return false; } return result; } function loadAjaxSubmitButton() { $("[type=submit]").on("click", function(event) { var form = $(this).parents('form:first'); form.find('.tempSerialize').remove(); if (form.data('ajax')) { if ($(this).prop("name")) { form.append('<input type="hidden" value="'+$(this).prop("value")+'" name="'+$(this).prop("name")+'" class="tempSerialize" />'); } } return true; }); } function ajaxFormSubmitted(ajaxFormId) { var form = document.querySelector('[data-ajax-form-id='+ajaxFormId+']'); toggleWaiting(form); } function readJSON(url, target) { $.ajax( { dataType: "json", url: url, crossDomain: true, statusCode: { 404: function() { alert( "page not found" ); } } }) .done(function( result ) { target.append("done"); target.append(result); }) .fail(function( textStatus ) { target.append("error"); alert( "Error : " + textStatus ); }) .always(function() { target.append("always"); }); } function dataPopup() { if (consoleDebug) console.log('[dataPopup] Load'); var els = document.querySelectorAll('[data-popup]'); [].forEach.call(els, function(el) { if (el.getAttribute("data-popup-handled") === 'true') return; el.addEventListener("click", function(e) { e.preventDefault(); e.stopPropagation(); e.stopImmediatePropagation(); var target = this.getAttribute("data-popup"); var size = this.getAttribute("data-popup-size") ? this.getAttribute("data-popup-size").split(' ') : null; var callback = this.getAttribute("data-popup-callback") ? this.getAttribute("data-popup-callback") : null; var firstChar = target.substr(0,1); var content = target; if (firstChar === "#") { content = document.getElementById(target.substr(1)).innerHTML; } insertPopup('<div class="popup-marged">' + content + '</div>', size, true, null, callback); return false; }); el.setAttribute("data-popup-handled", "true"); }); var els = document.querySelectorAll('[data-popup-page]'); [].forEach.call(els, function(el) { if (el.getAttribute("data-popup-page-handled") === 'true') return; el.addEventListener("click", function(e) { e.preventDefault(); e.stopPropagation(); var url = this.getAttribute("data-popup-page"); var size = this.getAttribute("data-popup-size") ? this.getAttribute("data-popup-size").split(' ') : null; var data = this.getAttribute("data-popup-data") ? JSON.parse(this.getAttribute("data-popup-data")) : null; var callback = this.getAttribute("data-popup-callback") ? this.getAttribute("data-popup-callback") : null; insertPopup('<div class="loading xlarge"></div><div class="popup-marged"></div>', size); ajax(url, 'POST', data, ".popup-content:last .popup-marged", 'append', callback, ".popup-content:last .loading"); }); el.setAttribute("data-popup-page-handled", "true"); }); } $(document).ready(function() { $(document).on("click", '[data-popup-img]', function(e) { e.preventDefault(); var windowHeight = $(window).height() - ($(window).height() * 0.2); var windowWidth = $(window).width() - ($(window).width() * 0.3); var sizeArg = ($(this).data("popup-size")) ? $(this).data("popup-size").split(' ') : null; var src = this.src ? this.src : $(this).data("popup-img"); var size = $(this).data("popup-img-size") ? $(this).data("popup-img-size") : "40em"; var text = $(this).data("popup-img-text") ? '<div class="popup-img-text opacity-10 opacity-hover-90">'+$(this).data("popup-img-text")+'</div>' : ''; insertPopup('<div class="popup-img-wrapper"><img src="'+src+'" alt="" class="block" style="max-width: ' + windowWidth + 'px; max-height: ' + windowHeight + 'px; margin: 0 auto 0 auto;" />'+text+'</div>', sizeArg); }); }); function insertPopup( content, size, closeable, id, callback ) { if (consoleDebug) console.log('[dataPopup] Insert'); var width = (size && size[0]) ? 'width: '+size[0]+'; ' : ''; var height = (size && size[1]) ? 'height: '+size[1]+'; ' : ''; var popupId = (id) ? id : 'popup'+Math.floor(Math.random() * 1000) + 1; var popups = document.querySelectorAll('.popup-bg'); var callback = (callback) ? (callback) : null; if (closeable == undefined) closeable = true; var popup = '<div class="popup-bg clearfix" id="'+popupId+'">' + '<div class="popup-wrapper">' + '<div class="popup-content" style="'+width+height+'" id="'+popupId+'-content">' + (closeable === true ? '<span class="popup-close cursor opacity-40 opacity-hover-100" id="'+popupId+'-close">&times;</span>' : '') + content + '</div></div></div>'; if (popups.length) { popups[popups.length - 1].insertAdjacentHTML('afterend', popup); } else { document.body.insertAdjacentHTML('afterbegin', popup); } if (closeable === true) { document.getElementById(popupId).addEventListener("click", function(e) { e.preventDefault(); e.stopPropagation(); closePopup(popupId); }); document.getElementById(popupId+'-close').addEventListener("click", function(e) { e.preventDefault(); e.stopPropagation(); closePopup(popupId); }); document.getElementById(popupId+'-content').addEventListener("click", function(e) { e.stopPropagation(); }); } $(".popup-bg").css("min-height", $(window).height() ); $(".popup-wrapper").css("max-height", $(window).height() ); $(".popup-content, .popup-content > *").css("max-height", $(window).height() ); dataCallback(callback); lockScroll(); } function closePopup(id) { if (document.getElementById(id)) { deleteElementById(id); unlockScroll(); } } function closeLastPopup() { var allPopup = document.getElementsByClassName('popup-bg'); var lastPopup = allPopup[allPopup.length - 1]; if (lastPopup != undefined) { lastPopup.parentElement.removeChild(lastPopup); unlockScroll(); console.log('[popup] Close'); } } function closeAllPopup() { deleteElementsByClass('popup-bg'); unlockScroll(); } function lockScroll() { document.documentElement.classList.add("screen-lock"); document.body.classList.add("screen-lock"); } function unlockScroll() { document.documentElement.classList.remove("screen-lock"); document.body.classList.remove("screen-lock"); } let messageContainer = document.getElementById("messages-container"); if (messageContainer) { let timeOutMessage = setTimeout(hideMessage, 10000); function hideMessage() { document.getElementById("messages-container").classList.add("hideme"); } } let selectSearchRegion = document.getElementById("search-region"); let selectSearchDepartment = document.getElementById("search-department"); let regionOptions = selectSearchRegion.options; let departmentOptions = selectSearchDepartment.options; let selectedRegion = selectSearchRegion.selectedIndex; let regionId = regionOptions[selectedRegion].getAttribute("data-region"); if (regionId) { let i; for (i = 0; i < selectSearchDepartment.length; i++) { if (selectSearchDepartment.options[i].getAttribute("data-region") === regionId) { selectSearchDepartment.options[i].style.display = "block"; selectSearchDepartment.options[i].style.visibility = "visible"; selectSearchDepartment.options[i].disabled = false; } else { selectSearchDepartment.options[i].style.display = "none"; selectSearchDepartment.options[i].style.visibility = "hidden"; selectSearchDepartment.options[i].disabled = true; } } } else { selectSearchDepartment.selectedIndex = 0; let i; for (i = 0; i < selectSearchDepartment.length; i++) { selectSearchDepartment.options[i].style.display = "block"; selectSearchDepartment.options[i].style.visibility = "visible"; selectSearchDepartment.options[i].disabled = false; } } selectSearchRegion.onchange = function(){ let selectedRegion = this.selectedIndex; let regionId = regionOptions[selectedRegion].getAttribute("data-region"); selectSearchDepartment.selectedIndex = 0; if (regionId) { let i; for (i = 0; i < selectSearchDepartment.length; i++) { if (selectSearchDepartment.options[i].getAttribute("data-region") === regionId) { selectSearchDepartment.options[i].style.display = "block"; selectSearchDepartment.options[i].disabled = false; selectSearchDepartment.options[i].style.visibility = "visible"; } else { selectSearchDepartment.options[i].style.display = "none"; selectSearchDepartment.options[i].disabled = true; selectSearchDepartment.options[i].style.visibility = "hidden"; } } } else { selectSearchDepartment.selectedIndex = 0; let i; for (i = 0; i < selectSearchDepartment.length; i++) { selectSearchDepartment.options[i].style.display = "block"; selectSearchDepartment.options[i].disabled = false; selectSearchDepartment.options[i].style.visibility = "visible"; } } }; window.addEventListener('scroll', function(){ if (window.pageYOffset > 60) { let top = document.getElementById("top"); top.style.backgroundColor = "white"; top.style.boxShadow = "0 5px 8px #F0F0F0"; let menuLinks = document.querySelectorAll("#top a.link"); let i; for (i = 0; i < menuLinks.length; i++) { menuLinks[i].style.color = "#333"; } } else { let top = document.getElementById("top"); top.style.backgroundColor = "transparent"; top.style.boxShadow = "none"; let menuLinks = document.querySelectorAll("#top a.link"); let i; for (i = 0; i < menuLinks.length; i++) { menuLinks[i].style.color = "white"; } } }); let acc = document.getElementsByClassName("accordion"); let iAcc; for (iAcc = 0; iAcc < acc.length; iAcc++) { if(iAcc === 0) { acc[0].classList.toggle("active"); let panel = acc[0].nextElementSibling; panel.style.maxHeight = panel.scrollHeight + "px"; } acc[iAcc].addEventListener("click", function() { this.classList.toggle("active"); let panel = this.nextElementSibling; if (panel.style.maxHeight){ panel.style.maxHeight = null; } else { panel.style.maxHeight = panel.scrollHeight + "px"; } }); } let accountWithSubMenu = document.getElementById("account-with-sub-menu"); if (accountWithSubMenu) { accountWithSubMenu.addEventListener('click', function(e){ e.stopPropagation(); document.getElementById("account-sub-menu").classList.toggle("display-none"); }); } window.addEventListener('click', function(e){ let accountSubMenu = document.getElementById("account-sub-menu"); if (accountSubMenu) { document.getElementById("account-sub-menu").classList.add("display-none"); } }); function onLoad() { document.domain = uriDomain + "." + uriTld; loadPlugins(); } function onResize() { responsiveClasses(); } function loadPlugins() { responsiveClasses(); dataModal(); dataPopup(); dataForm(); dataAjax(); dataEvent(); dataGoto(); } function ajaxBeforeCallback() { onLoad(); } function dataCallback(callbackFunctions) { callbackFunctions = (callbackFunctions) ? callbackFunctions.split(';') : []; [].forEach.call(callbackFunctions, function(functionString) { let functionSplited = functionString.split("("); let functionName = functionSplited[0].replace(" ", ""); if (typeof window[functionName] == 'function') { if (functionSplited.length === 2) { let functionArgs = functionSplited[1].replace(")", ""); let functionArgsArray = functionArgs.replace(" ", "").split(","); functionArgsArray = (functionArgsArray.length === 1) ? functionArgsArray[0] : functionArgsArray; window[functionName](functionArgsArray); if (consoleDebug) console.log( '[Callback] Function ' + functionName + '( '+functionArgsArray+' )' ); } else { window[(functionName)](); if (consoleDebug) console.log( '[Callback] Function ' + functionName + '()' ); } } else { if (consoleDebug) console.log( '[Callback] Function ' + functionName + '() not found !' ); } }); } function ajaxAfterCallback() { loadPlugins(); } function deleteElement(el) { el.parentElement.removeChild(el); return true; } function deleteElements(els) { [].forEach.call(els, function(el){ el.parentElement.removeChild(el); return true; }); } function deleteElementById(id) { if (document.getElementById(id)) { var el = document.getElementById(id); el.parentElement.removeChild(el); return true; } return false; } function deleteElementsByIds(ids) { ids.forEach(function(id){ deleteElementById(id); }); return true; } function deleteElementBySelector(selector) { var el = document.querySelector(selector); el.parentElement.removeChild(el); return true; } function deleteElementsBySelectors(selectors) { var els = document.querySelectorAll(selectors); els.forEach(function(el){ el.parentElement.removeChild(el); }); return true; } function deleteElementsByClass(className) { var es = document.getElementsByClassName(className); var i; for (i = 0; i < es.length; i++) { es[i].parentElement.removeChild(es[i]); } return true; } function deleteElementsByClasses(classesArray) { classesArray.forEach(function(className) { var es = document.getElementsByClassName(className); var i; for (i = 0; i < es.length; i++) { es[i].parentElement.removeChild(es[i]); } }); return true; } function clearElementById(id) { var el = document.getElementById(id); el.innerHTML = ''; return true; } function clearElementsByIds(ids) { ids.forEach(function(id){ clearElementById(id); }); return true; } function styleElementById(id, property, value) { var el = document.getElementById(id); el.style[property] = value; return true; } function styleElementBySelector(selector, property, value) { var el = document.querySelector(selector); el.style[property] = value; return true; } function styleElementsBySelectors(selectors, property, value) { var els = document.querySelectorAll(selectors); els.forEach(function(el){ el.style[property] = value; }); return true; } function wrapAll(nodes, wrapper) { var parent = nodes[0].parentNode; var previousSibling = nodes[0].previousSibling; for (var i = 0; nodes.length - i; wrapper.firstChild === nodes[0] && i++) { wrapper.appendChild(nodes[i]); } var nextSibling = previousSibling ? previousSibling.nextSibling : parent.firstChild; parent.insertBefore(wrapper, nextSibling); return wrapper; } function unwrap(el) { var dF = document.createDocumentFragment(); while (el.firstChild) { var ch = el.removeChild(el.firstChild); dF.appendChild(ch); } el.parentNode.replaceChild(dF, el); } function highlightGroupClass(params) { var groupSelector = params[0]; var highlightClass = params[1]; var defaultClass = params[2]; var targetSelector = params[3] ? params[3] : null; var elements = document.querySelectorAll(groupSelector); var target = document.querySelector(targetSelector); var targetState = target.classList.contains(highlightClass); elements.forEach(function(el) { el.classList.remove(highlightClass); el.classList.add(defaultClass); }); if (targetState) { target.classList.remove(highlightClass); } else { target.classList.add(highlightClass); } } function findParentByTagName (el, tagname) { while ((el = el.parentNode) && el.tagName != tagname.toUpperCase()); return el; } function findParentById (el, Id) { while ((el = el.parentNode) && el.id != Id); return el; } function arrayUnique(value, index, self) { return self.indexOf(value) === index; } function sortByKey(array, key) { return array.sort(function(a, b) { var x = a[key]; var y = b[key]; return ((x < y) ? -1 : ((x > y) ? 1 : 0)); }); } function sortRowsById(a, b) { var sa = a.getAttribute('id').toLowerCase(), sb = b.getAttribute('id').toLowerCase(); return sb<sa ? -1 : sb>sa ? 1 : 0; } function getPercentWidth(el) { var elW = el.clientWidth ? el.clientWidth : el.offsetWidth; var pW = el.parentNode.clientWidth ? el.parentNode.clientWidth : el.parentNode.offsetWidth; return ((elW/pW)*100).toFixed(2) + '%'; } function getPercentHeight(el) { var elH = el.clientHeight ? el.clientHeight : el.offsetHeight; var pH = el.parentNode.clientHeight ? el.parentNode.clientHeight : el.parentNode.offsetHeight; return ((elH/pH)*100).toFixed(2) + '%'; } function getRGB(rgb) { var array; var components; array = rgb.substring(rgb.indexOf('(') + 1, rgb.lastIndexOf(')')).split(/,\s*/); components = {}; components.red = array[0]; components.green = array[1]; components.blue = array[2]; components.opacity = array[3]; return components; } function rgbToHex(rgb) { rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i); return (rgb && rgb.length === 4) ? "#" + ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) + ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) + ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : ''; } function toggleDisplay(selector) { forEach(document.querySelectorAll(selector), function(k, el){ let cpStyle = window.getComputedStyle(el, null).getPropertyValue("visibility"); el.style.visibility = cpStyle === "hidden" ? "visible" : "hidden"; }); } function ucfirst(str, revert) { var f = (revert == false) ? str.charAt(0).toUpperCase() : str.charAt(0).toLowerCase(); return f + str.substr(1); } function submitForm(formId) { document.getElementById(formId).submit(); } function sortInputsByValue(a, b) { var sa = a.value.toLowerCase(), sb = b.value.toLowerCase(); return sb<sa ? -1 : sb>sa ? 1 : 0; } function formFieldSizeOnInput(inputObject, previewSelector, property, selectId, configValueId) { window.setTimeout(function() { document.getElementById(configValueId).value = inputObject.value + document.getElementById(selectId).value; styleElementsBySelectors(previewSelector, property, inputObject.value + document.getElementById(selectId).value); } , 100); } function formFieldSizeOnChange(selectObject, previewSelector, property, inputId, configValueId) { var inputValue = document.getElementById(inputId); var selectUnit = selectObject; if (!selectUnit.value || selectUnit.value == '' || arrayLiteralSizes.indexOf(selectUnit.value) > -1 || arrayAbsoluteSizes.indexOf(selectUnit.value) > -1) { inputValue.setAttribute("disabled", "disabled"); inputValue.classList.add('display-none'); inputValue.value = null; var previewValue = selectUnit.value; } else { inputValue.removeAttribute("disabled"); inputValue.classList.remove('display-none'); var previewValue = ''+inputValue.value + selectObject.value+''; } window.setTimeout(function() { document.getElementById(configValueId).value = previewValue; styleElementsBySelectors(previewSelector, property, previewValue); } , 100); } function formFieldSizeOnClick(action, previewSelector, property, inputId, selectId, configValueId) { var inputValue = document.getElementById(inputId); var selectUnit = document.getElementById(selectId); var selectValue = selectUnit.value; var result = ''; if (action == 'up') { if (selectUnit.value == 'px') result = parseInt(inputValue.value) + 1; if (selectUnit.value == 'em') result = (parseFloat(inputValue.value) + 0.05).toFixed(2); if (selectUnit.value == '%') result = parseInt(inputValue.value) + 1; var indexOf = arrayAbsoluteSizes.indexOf(selectUnit.value); if (indexOf > -1) { var selectedIndex = selectUnit.options.selectedIndex; var newIndex = parseInt(selectedIndex) + 1; var newOption = selectUnit.options[newIndex]; if (arrayAbsoluteSizes.indexOf(newOption.value) > -1) { selectUnit.options.selectedIndex = newIndex; selectValue = newOption.value; } else return; } } if (action == 'down') { if (selectUnit.value == 'px') result = parseInt(inputValue.value) - 1; if (selectUnit.value == 'em') result = (parseFloat(inputValue.value) - 0.05).toFixed(2); if (selectUnit.value == '%') result = parseInt(inputValue.value) - 1; var indexOf = arrayAbsoluteSizes.indexOf(selectUnit.value); if (indexOf > -1) { var selectedIndex = selectUnit.options.selectedIndex; var newIndex = parseInt(selectedIndex) - 1; var newOption = selectUnit.options[newIndex]; if (arrayAbsoluteSizes.indexOf(newOption.value) > -1) { selectUnit.options.selectedIndex = newIndex; selectValue = newOption.value; } else return; } } window.setTimeout(function() { inputValue.value = result; document.getElementById(configValueId).value = result + selectValue; styleElementsBySelectors(previewSelector, property, result + selectValue); } , 100); } function toggleWaiting(el) { if (el) { el.classList.toggle('opacity-30'); el.classList.toggle('cursor-wait'); forEach(el.querySelectorAll('*'), function(k, v){ v.classList.toggle('cursor-wait'); }); } } function toggleWaitingFromId(id) { var el = document.getElementById(id); toggleWaiting(el); } function messageAutoHide() { $(document).ready(function() { $('.box-success:not(.noHide)') .delay(2000) .slideToggle('slow', function() { $(this).remove(); }); }); } function msieversion() { var ua = window.navigator.userAgent; var msie = ua.indexOf('MSIE '); if (msie > 0) { return 'MSIE'; } var trident = ua.indexOf('Trident/'); if (trident > 0) { return 'Trident'; } var edge = ua.indexOf('Edge/'); if (edge > 0) { return 'Edge'; } return false; } function date() { var oDate = new Date(); return oDate.getDate() + "/" + oDate.getMonth() + "/" + oDate.getFullYear(); } function datetime() { var oDate = new Date(); return oDate.getDate() + "/" + oDate.getMonth() + "/" + oDate.getFullYear() + " " + oDate.getHours() + ":" + oDate.getMinutes() + ":" + oDate.getSeconds(); } function shortDatetime() { var oDate = new Date(); return oDate.getDate() + "/" + oDate.getMonth() + "/" + oDate.getFullYear() + " " + oDate.getHours() + ":" + oDate.getMinutes(); } function getRandomInt(max) { return Math.floor(Math.random() * Math.floor(max)); } function parseURL(url) { var a = document.createElement('a'); a.href = url; return { source: url, protocol: a.protocol.replace(':',''), host: a.host, hostname: a.hostname, port: a.port, query: a.search }; } var forEach = function (items, callback, scope) { for (var i = 0; i < items.length; i++) { callback.call(scope, i, items[i]); } }; document.addEventListener('DOMContentLoaded', function() { onLoad(); }, false);  var resizeTimeout; window.onresize = function(e) { clearTimeout(resizeTimeout); resizeTimeout = setTimeout(function() { onResize(); }, 300); };  var cname = "cookiesAccepted"; var clname = "cookiesLevel"; window.onload = function() { cookiesPopup(); }; function cookiesPopup() { deleteElementById("cookiesPopup"); if (checkCookie(cname)) { console.log("Cookies accepted by user !"); } else { var body = document.getElementsByTagName("body")["0"]; body.insertAdjacentHTML("afterbegin", '<div id="cookiesPopup">' + 'Ce site utilise des cookies pour son fonctionnement et la personnalisation de votre navigation &nbsp; ' + '<button type="button" onclick="acceptCookies(3);">Accepter et continuer</button> ' + '&nbsp; <a href="#" onclick="confCookies();" title="" />Paramètres avancés</a>' + '</div>'); } } function setCookie(cname, cvalue, exdays) { var d = new Date(); d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000)); var expires = "expires="+d.toUTCString(); document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/"; } function deleteCookie(cname) { document.cookie = cname + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"; } function getCookie(cname) { var name = cname + "="; var ca = document.cookie.split(';'); for(var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) === ' ') { c = c.substring(1); } if (c.indexOf(name) === 0) { return c.substring(name.length, c.length); } } return ""; } function checkCookie(cname) { var cookie = getCookie(cname); if (cookie !== "") { return true; } else { return false; } } function acceptCookies(level) { setCookie(cname, "TRUE", 365); setCookie(clname, level, 365); deleteElementById("cookiesPopup"); } function confCookies() { var body = document.getElementsByTagName("body")["0"]; deleteElementById("cookiesPopup"); var level = getCookie(clname); level = (level > 0) ? level : 3; var l1chk = (level === 1) ? ' checked="checked" ' : ''; var l2chk = (level === 2) ? ' checked="checked" ' : ''; var l3chk = (level === 3) ? ' checked="checked" ' : ''; body.insertAdjacentHTML("afterbegin", '<div id="cookiesPopup">' + '<div id="cookiesPopupConf">' + '<h3>Configuration des cookies</h3>' + '<p>Merci de sélectionner le niveau d\'utilisation des cookies</p>' + '<input type="radio" name="cookiesLevel" value="1" '+l1chk+' /> Cookies obligatoires<p class="levelInfo">Nécessaires au fonctionnement interne du site.<br />Sécurité des connexions et des transactions, gestion des sessions, système multilingue, saisies temporaires des formulaires en ligne, système d\'authentification par un tiers.</p>' + '<input type="radio" name="cookiesLevel" value="2" '+l2chk+' /> Cookies fonctionnels<p class="levelInfo">Améliore l\'éxperience utilisateur durant sa session et sur le long terme.<br />Se souvenir de vos informations de connexion, du contenu de vos paniers, stockage de données techniques liées aux lecteurs multimédia.</p>' + '<input type="radio" name="cookiesLevel" value="3" '+l3chk+' /> Cookies de personnalisation<p class="levelInfo">Personnalise l\'éxperience utilisateur sur le site.<br />Contenu et apparence personnalisés selon votre historique de navigation et/ou d\'achats, partages de pages avec des réseaux sociaux, publicités adaptées à vos centres d\'intérêt.</p>' + '<br /><button type="button" onclick="confCookiesSave();">Enregistrer</button> &nbsp; ' + '<button type="button" onclick="cookiesPopup();">Fermer</button>' + '</div>' + '</div>'); } function confCookiesSave() { var level = document.querySelector('input[name="cookiesLevel"]:checked').value; acceptCookies(level); } function deleteElementById(id) { var el = document.getElementById(id); if (el) { el.parentElement.removeChild(el); return true; } }var startMicrotime = '1695204300.0043'; var webPath = '/'; var uri = 'https:\/\/www.echange-service.com\/'; var uriScheme = 'https'; var uriHost = 'www.echange-service.com'; var uriSubDomain = 'www'; var uriDomain = 'echange-service'; var uriTld = 'com'; var defaultUri = 'https:\/\/www.echange-service.com'; var defaultUriScheme = 'https'; var defaultUriHost = 'echange-service.com'; var defaultUriSubDomain = 'www'; var defaultUriDomain = 'echange-service'; var defaultUriTld = 'com'; var uiImgWebPath = '/assets/img/EchangeService/'; var uiDir = 'EchangeService'; var langLocale = 'fr_FR'; var langCode = 'fr'; var consoleDebug = '1'; var IE = msieversion(); 